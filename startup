--[[
    Vars
--]]
VER = 0.7;
NORTH, EAST, SOUTH, WEST = 0, 1, 2, 3;

-- Change with caution
LOG, DIRT, SAPLING, COBBLE, COAL = 1, 2, 3, 4, 5;

-- Maximum amount to go up to avoid the ground
MAX_AVOID = 4;

----------------------------------------------------------------------
-- Tasks
----------------------------------------------------------------------
--[[
	First Task:
		find first adjacent tree
--]]
function findFirstTree()
    turtle.removeUnwanted(LOG);
    turtle.select(LOG);
    
	for i=1, 4 do
        -- Get first wood
        if turtle.detect() then
            turtle.dig();
                
            -- Check is wood
            if turtle.refuel() then
                turtle.forward();
                setHomeToHere();
                
                -- Get second wood
            	turtle.up();
            	
            	-- Get rest of the wood
            	local areBranches = cutTree(1, 2, true);
            	if areBranches then error("This tree is too big!"); end
            	
				refuelWithSticks();
				
				setFound(LOG);
            	return;
            else
            	turtle.drop();
            end
		end
		
		turtle.turnLeft();
	end
	
	error("I couldn't find a tree!");
end

--[[
    Second Task:
        find dirt
--]]
function findDirt()
    turtle.goHome();
    turtle.removeUnwanted(DIRT);
    turtle.select(DIRT);    
	
    turtle.digDown();
	
	setFound(DIRT);
end

--[[
    Third Task:
		find more near by trees
--]]
function findMoreTrees()
	turtle.goto(state.home.x, state.home.y + 2, state.home.z);
	
	local oldCount = turtle.getItemCount(1);
	
	-- loop
	for sideLng = 1, 10 do
		for corners = 0, 1 do
			for xz = 1, sideLng do
				turtle.select(LOG);
				
				if turtle.dig() then
					turtle.forward();
					
					if turtle.getItemCount(1) > oldCount or turtle.compareDown() or turtle.compareUp() then
						-- If close check for branches
						local areBranches = cutTree(1, 3, sideLng <= 4);
						if areBranches then error("This tree is too big!"); end
						
						refuelWithSticks();
						oldCount = turtle.getItemCount(1);
					elseif turtle.getItemCount(3) > 0 then                
						turtle.select(3);
						-- Check is an unknown tree, if is cut it down using it all as fuel
						if (turtle.compareUp() or turtle.compareDown()) and turtle.refuel(true) then
							cutTree(1, 3);
						elseif doSaplingCheck() then
							local oldFace = state.face;
							turtle.faceBlock(0, 0);
							if turtle.detect() then turtle.dig(); end
							turtle.select(SAPLING);
							turtle.drop();
							turtle.face(oldFace);
						elseif state.y <= state.home.y + MAX_AVOID and turtle.dig() and turtle.place() then
							turtle.up();
						end
						turtle.clearSlot(3);
					elseif sideLng >= 10 then -- only need to check on last side
						-- Dug with no drop (leaves). Check for tree
						local startFace = state.face;
						
						for i=1, 3 do
							-- If in middle of a side don't need to check directly infront
							if xz ~= sideLng then turtle.turnRight(); end
						
							if turtle.compare() then
								local oldX, oldZ = state.x, state.z;
								turtle.forward();
								
								cutTree(1, 3);
								refuelWithSticks();
								oldCount = turtle.getItemCount(1);
								
								turtle.goto(oldX, state.y, oldZ);
								break;
							else
								turtle.turnRight();
							end
						end
						
						turtle.face(startFace);
					end
				else
					-- Always go forward, just don't need to do any checks
					turtle.forward();
				end
			end
			turtle.turnRight();
		end
	end
	
    turtle.goHome();
    
	refuelWithSticks();
end

--[[
	Fourth Task:
		collect sapplings from first tree
--]]
function findSaplings(pRadius)
	if pRadius == nil then pRadius = 2 end
	assert(type(pRadius) == "number");
	assert(pRadius > 0 and pRadius <= 3);

	if not hasFound(SAPLING) then
		-- Go north and west
		turtle.goto(state.x + pRadius, state.y, state.z - pRadius);
		turtle.face(EAST);
		
		turtle.freeSlot(SAPLING, 12);
	end
    
	turtle.select(SAPLING);
	
	-- Give saplings some more time
	print(" - Waiting 30 seconds for saplings...");
	os.sleep(30);
	turtle.suckUp();
	
    for i=1, (pRadius*2)*4 - 2 do -- can skip last 2
		searchAndCheckSaplings();
       
		turtle.forward();
		if i % (pRadius*2) == 0 then
			turtle.turnRight();
		end
        
        if not hasFound(SAPLING) then turtle.freeSlot(SAPLING, 12); end
		turtle.select(SAPLING);
    end
	
	-- If needed check around center
	if pRadius > 2 then
		turtle.goto(state.x - pRadius, state.y, state.z + pRadius);
		searchAndCheckSaplings();
	end
end

--[[
	Fourth Task:
		find cobblestone
--]]
function findCobblestone()
    turtle.goHome();
	
	-- Check for sapling
	turtle.select(SAPLING);
	turtle.suckDown();
	
    turtle.removeUnwanted(COBBLE);
    turtle.select(1);
    
    digToBedrock();
    turtle.goto(state.x, state.y + 6, state.z);
    
    -- Hit bottom, save height
    state.home.y = -state.y;
    state.y = 0;
    
    -- Dig to top
    turtle.forward();
    turtle.goto(state.x, state.home.y, state.z);
    
    -- Get any saplings that may have been there
    turtle.suckUp();
    
    -- Break surface if needed
    while turtle.detectUp() do turtle.up(); end
    
    -- Cobble must be one of first new blocks broken
    local highSlot, highSlotCount = 4, turtle.getItemCount(4);
    for slot = 5, 10 do
        if turtle.getItemCount(slot) > highSlotCount then
            highSlot = slot;
        end
    end
    
    -- Move cobblestone if needed
    if highSlot ~= 4 then
        turtle.freeSlot(4, 16);
        turtle.freeSlot(highSlot, 4);
    end
	
	setFound(COBBLE);
end

--[[
    Fifth Task:
        using items from find cobblestone determine which is coal
--]]
function checkForCoal()    
    -- Clear a space for placing
    if turtle.detectUp() then 
		turtle.digUp();
	end
    
    for slot=COAL, 16 do
        turtle.select(slot);
        
        -- If can be placed not coal
        if turtle.placeUp() then
            turtle.digUp();
        -- If can't be placed and can refuel is coal, make sure don't lose (check count)
        elseif turtle.getItemCount(slot) > 1 and turtle.refuel(true) then
            if slot ~= COAL then
            	turtle.freeSlot(COAL, 12);
				
				turtle.select(slot);
            	turtle.transferTo(COAL);
            end
			
			setFound(COAL);
            break;
        end
    end
    
    -- Refuel with all but 1 coal
    turtle.select(5);
    turtle.refuel(true, turtle.getItemCount(5) - 1);
end

--[[
    Task:
        build a base
--]]
function buildBaseA()
    -- Finalize home
	state.home.face = NORTH;
    state.home.y = state.home.y + 10;
	turtle.goHome();
	
	turtle.select(COBBLE);
	turtle.forward();
	for x=1,5 do
		for z=1,5 do
			if turtle.detectDown() then turtle.digDown(); end
			
			if (x == 3 and z == 3) then -- or ((x == 1 or x == 5) and (z == 1 or z == 5))
				turtle.select(DIRT);
				turtle.placeDown();
			
				-- Limiting top block
				turtle.select(COBBLE);
				for y=1, 7 do turtle.up(); end
				turtle.placeUp();
				for y=1, 7 do turtle.down(); end
			else 
				turtle.placeDown();
			end
			
			if z < 5 then turtle.forward(); end
		end
		
		-- Turn for next row
		local turnFunc = turtle.turnRight;
		if x % 2 ~= 0 then
			turnFunc = turtle.turnLeft;
		end
		turnFunc();
		turtle.forward();
		turnFunc();
	end
end

--[[
	Task:
		Grow a tree
--]]
function plantTrees()
	-- (3,3) Sapling
	turtle.goto(state.home.x+2, state.home.y, state.home.z-2);
	turtle.face(NORTH);
	placeSapling();
	if turtle.getItemCount(SAPLING) <= 0 then return; end
	
	-- (1,1) Sapling
	turtle.face(EAST);
	turtle.forward();
	turtle.forward();
	turtle.face(SOUTH);
	placeSapling();
	if turtle.getItemCount(SAPLING) <= 0 then return; end
	
	-- (1,5) Sapling
	turtle.face(NORTH);
	turtle.forward();
	turtle.forward();
	placeSapling();
	if turtle.getItemCount(SAPLING) <= 0 then return; end
	
	-- (5, 5) Sapling
	turtle.face(WEST);
	for i=1,4 do turtle.forward(); end
	turtle.face(NORTH);
	placeSapling();
	if turtle.getItemCount(SAPLING) <= 0 then return; end
	
	-- (5, 1) Sapling
	turtle.face(SOUTH);
	turtle.forward();
	turtle.forward();
	placeSapling();
	if turtle.getItemCount(SAPLING) <= 0 then return; end
end

function farmTrees()
	turtle.select(LOG);
	if state.treesPlanted <= 0 then return; end

	-- (3,3) Tree
	turtle.goto(state.home.x+2, state.home.y, state.home.z-2);
	turtle.face(NORTH);
	waitThenCutTree();
	
	-- Tree (1,1)
	if state.treesPlanted > 0 then
		turtle.face(EAST);
		turtle.forward();
		turtle.forward();
		turtle.face(SOUTH);
		waitThenCutTree();
	end
	
	-- Tree (1,5)
	if state.treesPlanted > 0 then
		turtle.face(NORTH);
		for i=1,3 do turtle.forward(); end
		turtle.goto(state.x + 3, state.y, state.z);
		waitThenCutTree();
	end
	
	-- Tree (5,5)
	if state.treesPlanted > 0 then
		turtle.face(WEST);
		for i=1,3 do turtle.forward(); end
		waitThenCutTree();
	end
	
	-- Tree (5, 1)
	if state.treesPlanted > 0 then
		turtle.face(SOUTH);
		for i=1,3 do turtle.forward(); end
		waitThenCutTree();
	end
	
	turtle.refuel(true, turtle.getItemCount(LOG) - state.logsToKeep);
	
	-- setup for findSaplings
	turtle.goto(state.home.x + 5, state.home.y, state.home.z);
	turtle.face(NORTH);
	
	-- Wait
	print(" - Waiting 2 minutes for saplings...");
	os.sleep(120);
	
	findSaplings(2);
	
	-- Reset sapling for farming
	plantTrees();
end

--[[
	Task:
		build a chest for temp storage
--]]
function buildChest()
	state.logsToKeep = 1;
end

--[[
    Task:
        go underground and mine a section looking for iron
--]]
function findIron()  
	turtle.select(1);

    -- Ore commong from (30-40)
    turtle.goto(state.home.x - 1, 35, state.home.z);
	turtle.face(NORTH);
	
	local posX = true;
	while turtle.getFuelLevel() > 100 do
		turtle.select(1);
		
		local turns = 0;
		for i=1,16 do
			if turtle.detect() then
				turns = 0;
				turtle.forward();
				
				-- Keep on track
				if posX then
					turtle.face(NORTH);
				else
					turtle.face(SOUTH);
				end
			elseif turns < 4 then
				turns = turns + 1;
				if posX then
					turtle.turnRight();
				else
					turtle.turnLeft();
				end
			else
				turns = 0;
				if state.y < 40 and turtle.detectUp() then
					turtle.up();
				elseif state.y > 30 and turtle.detectDown() then
					turtle.down();
				else
					turtle.down();
				end
			end
		end
		
		if posX then
			turtle.turnRight();
			turtle.forward();
			turtle.face(SOUTH);
		else
			turtle.turnLeft();
			turtle.forward();
			turtle.face(NORTH);
		end
		
		posX = not posX;
		
		if turtle.getFuelLevel() <= 100 then
			refuelWithCoal();
			turtle.select(1);
		end
	end
	
	state.mineX = state.x;
	state.mineZ = state.z;
end

--[[
	New Turtle Util
--]]
oldTurtle = {
	turnRight = turtle.turnRight, turnLeft = turtle.turnLeft,
	forward = turtle.forward, back = turtle.back,
	up = turtle.up, down = turtle.down,
	refuel = turtle.refuel
};

turtle.refuel = function(pForce, pAmount)	
	if pForce or turtle.getFuelLevel() < 1 then
		if pAmount == nil then pAmount = 1; end
	
		return oldTurtle.refuel(pAmount);
	else
		return true;
	end
end

-- Slow, use sparingly
turtle.back = function()
	turtle.turnRight();
	turtle.turnRight();
	if turtle.forward() then
		turtle.turnLeft();
		turtle.turnLeft();
	
		return true;
	else
		return false;
	end
end

turtle.forward = function()
	turtle.refuel();

	while not oldTurtle.forward() do
		-- Try to mine, if can't mine hit something unmineable (bedrock)
		if turtle.detect() and not turtle.dig() then return false; end
	
		while turtle.attack() do end
	end
	
	if state.face == NORTH then state.x = state.x + 1;
	elseif state.face == SOUTH then state.x = state.x - 1;
	elseif state.face == EAST then state.z = state.z + 1;
	elseif state.face == WEST then state.z = state.z - 1;
	else error("Turtle invalid face " .. state.face);
	end
	
	saveState();
	return true;
end
	
turtle.up = function()
	turtle.refuel();

	while not oldTurtle.up() do
		-- Try to mine, if can't mine hit something unmineable (bedrock)
		if turtle.detectUp() and not turtle.digUp() then return false; end
		
		while turtle.attackUp() do end
	end
	
	state.y = state.y + 1;
	
	saveState();
	return true;
end

turtle.down = function()
	turtle.refuel();

	while not oldTurtle.down() do
		-- Try to mine, if can't mine hit something unmineable (bedrock)
		if turtle.detectDown() and not turtle.digDown() then return false; end
		
		while turtle.attackDown() do end
	end

	state.y = state.y - 1;
	
	saveState();
	return true;
end

turtle.turnRight = function()
	oldTurtle.turnRight();
	state.face = (state.face + 1) % 4;
	
	saveState();
	return true;
end

turtle.turnLeft = function()
	oldTurtle.turnLeft();
	if state.face == 0 then
		state.face = 3;
	else
		state.face = state.face - 1;
	end
	
	saveState();
	return true;
end

--[[
	Turtle Util
--]]
turtle.freeSlot = function(pToFreeSlot, pToStoreSlot)
    turtle.select(pToFreeSlot);
	if not turtle.transferTo(pToStoreSlot) then
		turtle.turnLeft();
		turtle.drop();
		turtle.turnRight();
	end
end

turtle.faceBlock = function(x, z)
	local xDist, zDist = math.abs(x - state.x), math.abs(z - state.z);
	if xDist >= zDist then
		if x > state.x then
			turtle.face(NORTH);
		else
			turtle.face(SOUTH);
		end
	else
		if z > state.z then
			turtle.face(EAST);
		else
			turtle.face(WEST);
		end
	end
end

turtle.face = function(pFace)
	assert(pFace >= 0 and pFace <= 3, "Invalid direction " .. pFace);
	
	-- Handle rap-around
	if (state.face < pFace and state.face + 4 - pFace < 2) or (state.face > pFace and pFace + 4 - state.face < 2) then
		while (pFace ~= state.face) do turtle.turnRight(); end
	else
		while (pFace ~= state.face) do turtle.turnLeft(); end
	end
end

turtle.goto = function(pX, pY, pZ, pFace)
	assert(type(pX) == "number" and type(pY) == "number" and type(pZ) == "number", "Goto location must be given as 3 numbers");
	
	-- Avoid breaking home
	if state.y == state.home.y - 1 then
		turtle.down();
	elseif state.y == state.home.y then
		turtle.up();
	end
	
	if ((state.y > state.home.y and pY < state.home.y) or (state.y < state.home.y and pY > state.home.y)) then
		turtle.goHome();
	end
	
	-- Correct x position
	if state.x > pX then
		turtle.face(SOUTH);
	elseif state.x < pX then
		turtle.face(NORTH);
	end	
	
	while state.x ~= pX do turtle.forward(); end
	
	-- Correcy z position
	if state.z > pZ then
		turtle.face(WEST);
	elseif state.z < pZ then
		turtle.face(EAST);
	end
	while state.z ~= pZ do turtle.forward(); end

	-- Correct y position
	while state.y > pY do turtle.down(); end
	while state.y < pY do turtle.up(); end
	
	if type(pFace) == "number" then
		turtle.face(pFace);
	end
end

turtle.goHome = function()
	turtle.goto(state.home.x, state.home.y, state.home.z, state.home.face);
end

turtle.clearSlot = function(pSlot)
	turtle.select(pSlot);
	if not turtle.refuel(true) then
	
		-- If it's not fuel try to save it
		local requiredSpace = turtle.getItemCount(pSlot);
		for i=1, 16 do
			if i ~= pSlop and turtle.compareTo(i) then
				turtle.transferTo(i);
				break;
			end
		end
	end
	turtle.drop();
end

turtle.clearInventory = function()
	for i = 1, 16 do
		turtle.select(i);
		turtle.drop();
	end
end

-- Remove any unwanted items from slot pStartIdx onward
turtle.removeUnwanted = function(pStartIdx)
	assert(type(pStartIdx) == "number" and pStartIdx >= 1 and pStartIdx <= 16);

	print(" - Removing from " .. pStartIdx .. " onward");
	for i = pStartIdx, 16 do
		turtle.select(i);
		turtle.refuel(true, 64);
		turtle.drop();
	end
end

----------------------------------------------------------------------
-- Util
----------------------------------------------------------------------

--[[
	Checks
--]]

function searchAndCheckSaplings()
	for face=1, 4 do			
		if turtle.detect() then 
			turtle.dig(); 
			if not hasFound(SAPLING) then
				turtle.freeSlot(SAPLING, 12);
			end
		end
		
		-- If picked up something and hasn't found sapling
		if (turtle.suck() or turtle.suckDown()) and not hasFound(SAPLING) then 
			doSaplingCheck();
		end
		
		turtle.turnRight();
	end
end

-- RETURNS true if found saplings on this check
function doSaplingCheck()
	if hasFound(SAPLING) then
		return false; -- Already found
	end

	-- Make check area
	turtle.up();
	turtle.select(DIRT);
	turtle.placeDown();
	turtle.up();
	if turtle.detectUp() then turtle.digUp(); end
	
	turtle.select(SAPLING);
	if not turtle.placeUp() and turtle.placeDown() then
		turtle.digDown();
		
		setFound(SAPLING);
	end
	
	turtle.down();
	turtle.select(DIRT);
	turtle.down();
	return true;
end

--[[
    Common Functions
--]]

function digToBedrock()
    while not turtle.detectDown() or turtle.digDown() do
        turtle.down();
    end
end

-- Works at any time. RETURNS true if refueled
function refuelWithCoal()
	if hasFound(COAL) then
		turtle.select(COAL);
		return turtle.refuel(turtle.getItemCount(COAL) - 1);
	else
		checkForCoal();
		return hasFound(COAL);
	end
end

-- Only works if just has logs and dirt
function refuelWithSticks()
    turtle.select(LOG);  -- Save a log
    if turtle.detectUp() then turtle.digUp(); end
    turtle.placeUp();
	
	turtle.select(DIRT); -- Save dirt
	if turtle.detectDown() then turtle.digDown(); end
	turtle.placeDown();
	
	turtle.removeUnwanted(DIRT + 1); -- Remove extra
	
	turtle.select(LOG); -- Planks
	turtle.craft();   
	turtle.transferTo(5, turtle.getItemCount(1) / 2);
	turtle.craft();     -- Sticks
	turtle.refuel(true, 64);
    turtle.digUp();     -- Recover log
	turtle.digDown();   -- Reconver dirt
end

function placeSapling()
	turtle.select(SAPLING);
	if turtle.place() then
		state.treesPlanted = state.treesPlanted + 1;
	end
end

function waitThenCutTree()
	if turtle.detect() then
		state.treesPlanted = state.treesPlanted - 1;
		print(" - Waiting for tree to grow");
		while not turtle.compare() do os.sleep(1); end
		turtle.forward();
		cutTree(1);
	else
		print(" - No tree or sapling found");
	end
end	

-- Cut down a tree and remove excess in overflow slot
-- Return true asked to check for branches and found them
function cutTree(pTargSlot, pOverflow, pCheckForBranches)
	-- Type check
	assert(type(pTargSlot) == "number" and (type(pOverflow) == "number" or not pCheckForBranches), "Slots must be numbers");
	
	print(" - Cut tree at (" .. state.x .. "," .. state.z .. ")");

	local startY, startFace, areBranches = state.y, state.face, false;
	
	turtle.select(pTargSlot);
	
	-- Handle doesn't have log
	if turtle.getItemCount(pTargSlot) <= 0 then
		if turtle.detectUp() then 
			turtle.up(); 
		else
			return false;
		end
	end
	
	-- Get tree
	while turtle.compareUp() do turtle.up(); end
	
	-- Check for branches
	local startLogs = turtle.getItemCount(LOG);
	while pCheckForBranches and (turtle.compareDown() or state.y > startY) do
		for checkFace=1, 4 do
			if turtle.detect() and turtle.dig() then
				if turtle.getItemCount(LOG) > startLogs then
					areBranches = true;
					break;
				else
					turtle.clearSlot(pOverflow);
					turtle.select(pTargSlot);
				end
			end
			
			-- 270 degree not 360, resets face below
			if checkFace ~= 4 then turtle.turnRight(); end
		end
	
		turtle.down(); 
	end
	
	-- Go down to start position
	while state.y > startY do turtle.down(); end
	
	-- Handle still doesn't have logs
	if turtle.getItemCount(pTargSlot) <= 0 then
		if turtle.detectDown() then
			turtle.down();
		else
			return false;
		end
	end
	
	-- Get logs below start
	while turtle.compareDown() do turtle.down(); end
	
	-- Reset
	turtle.goto(state.x, startY, state.z);
	
	if pCheckForBranches then turtle.clearSlot(pOverflow); end
	
	turtle.face(startFace);
	turtle.select(pTargSlot);
	
	return areBranches;
end

function setHomeToHere()
    state.home.x = state.x;
    state.home.y = state.y;
    state.home.z = state.z;
end

oldPrint = print;
print = function(var)
	if var ~= nil then oldPrint(var); end

	local x,y = term.getCursorPos();
	term.setCursorPos(1, 1);
	term.clearLine();	
	write("Prey v" .. VER .. "   Task: " .. state.task .. "   Fuel: " .. turtle.getFuelLevel() .. "\n");
	for i=1, term.getSize() do write("-"); end
	term.setCursorPos(x, y);
end

function hasFound(id)
	assert(type(id) == "number");
	
	return foundItems[id] == true and turtle.getItemCount(id) > 0;
end

function setFound(id)
	assert(type(id) == "number");
	
	print(" - Found item #" .. id);
	foundItems[id] = true;
end

function saveState()
	print();

	fs.delete("memory");
	local file = io.open("memory", "w");
	
	file:write(state.x .. "\n");
	file:write(state.y .. "\n");
	file:write(state.z .. "\n");
	file:write(state.face .. "\n");
	file:write(state.home.x .. "\n");
	file:write(state.home.y .. "\n");
	file:write(state.home.z .. "\n");
	file:write(state.home.face .. "\n");
	file:write(state.task .. "\n");
	file:write(state.mineX .. "\n");
	file:write(state.mineZ .. "\n");
	file:write(state.treesPlanted .. "\n");
	file:write(state.logsToKeep .. "\n");
	
	file:close();
end

function readState()
	if not fs.exists("memory") then return; end

	local file = io.open("memory");

	local i = 0;
	for line in file:lines() do
		line = tonumber(line);
		
		if i == 0 	   then state.x = line;
		elseif i == 1  then state.y = line;
		elseif i == 2  then state.z = line;
		elseif i == 3  then state.face = line;
		elseif i == 4  then state.home.x = line;
		elseif i == 5  then state.home.y = line;
		elseif i == 6  then state.home.z = line;
		elseif i == 7  then state.home.face = line;
		elseif i == 8  then state.task = line;
		elseif i == 9  then state.mineX = line;
		elseif i == 10 then state.mineZ = line;
		elseif i == 11 then state.treesPlanted = line;
		elseif i == 12 then state.logsToKeep = line;
		else error("Prey state file overflow!");
		end
		
		i = i + 1;
	end
	
	-- DON'T FORGET TO UPDATE
	if i < 12 then error("Prey state file undeflow!"); end
	
	file:close();
end

function copyStartup()
	if fs.exists("disk/startup") then
		if fs.exists("startup") then
			print("Replace startup file? (y/n)");
			local _, input = os.pullEvent("key");
			if tostring(input) ~= "y" and tostring(input) ~= "Y" then
				print("Canceled");
				return;
			end
			
			fs.delete("startup");
		end

		fs.copy("disk/startup", "startup");
	end
end

--[[
	State machine
--]]
state = {
	task = 1,
	
	x = 0,
	y = 0,
	z = 0,
	face = 0,
	
	home = {
		x = 0,
		y = 0,
		z = 0,
		face = 0
	},
	
	treesPlanted = 0,
	logsToKeep = 3,
	
	mineX = 0,
	mineZ = 0
};

foundItems = { };

tasks = {
	findFirstTree, findDirt, findMoreTrees, findSaplings, findCobblestone, checkForCoal, buildBaseA, plantTrees, farmTrees, buildChest, findIron, farmTrees
};

---------------------
-- Start
---------------------

print("Running Prey v" .. VER);

copyStartup();
readState();
while state.task ~= -1 and state.task <= table.getn(tasks) do
	print("* New task " .. tostring(state.task) .. "/" .. table.getn(tasks));
	(tasks[state.task])();
	
	state.task = state.task + 1;
	saveState();
end

print("Done");
